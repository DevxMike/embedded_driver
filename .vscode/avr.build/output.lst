
.vscode/avr.build/output.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	84 c0       	rjmp	.+264    	; 0x116 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
__trampolines_start():
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
__do_copy_data():
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e9       	ldi	r30, 0x9A	; 154
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
__do_clear_bss():
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e6       	ldi	r26, 0x64	; 100
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 36       	cpi	r26, 0x66	; 102
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
.do_clear_bss_start():
  58:	6d d0       	rcall	.+218    	; 0x134 <main>
  5a:	9d c0       	rjmp	.+314    	; 0x196 <_exit>

0000005c <__bad_interrupt>:
__vector_1():
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_3>:
__vector_3():
/media/michael/HDD/src/avr_nauka/c++/code/main.c:68
    }
}
ISR(TIMER1_COMPA_vect){
    cycle = 1;
}
ISR(TIMER2_COMP_vect){
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	3f 93       	push	r19
  6c:	4f 93       	push	r20
  6e:	5f 93       	push	r21
  70:	6f 93       	push	r22
  72:	7f 93       	push	r23
  74:	8f 93       	push	r24
  76:	9f 93       	push	r25
  78:	af 93       	push	r26
  7a:	bf 93       	push	r27
  7c:	ef 93       	push	r30
  7e:	ff 93       	push	r31
/media/michael/HDD/src/avr_nauka/c++/code/main.c:69
    PORTD &= ~(1 << dig);
  80:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <dig>
  84:	22 b3       	in	r18, 0x12	; 18
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__vector_3+0x32>
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	3a 95       	dec	r19
  92:	e2 f7       	brpl	.-8      	; 0x8c <__vector_3+0x2e>
  94:	80 95       	com	r24
  96:	90 95       	com	r25
  98:	82 23       	and	r24, r18
  9a:	82 bb       	out	0x12, r24	; 18
/media/michael/HDD/src/avr_nauka/c++/code/main.c:70
    if(++dig > 3) {
  9c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <dig>
  a0:	8f 5f       	subi	r24, 0xFF	; 255
  a2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <dig>
  a6:	84 30       	cpi	r24, 0x04	; 4
  a8:	10 f0       	brcs	.+4      	; 0xae <__vector_3+0x50>
/media/michael/HDD/src/avr_nauka/c++/code/main.c:71
        dig = 0;
  aa:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <dig>
/media/michael/HDD/src/avr_nauka/c++/code/main.c:74
    }
    set_register_outputs(
        eeprom_read_byte(&LED_DISP_VALS[values[dig]]) | (dig == 2? 0x01 : 0x00)
  ae:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <dig>
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	e0 5a       	subi	r30, 0xA0	; 160
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	80 81       	ld	r24, Z
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	80 50       	subi	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	62 d0       	rcall	.+196    	; 0x186 <eeprom_read_byte>
  c2:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <dig>
/media/michael/HDD/src/avr_nauka/c++/code/main.c:73
ISR(TIMER2_COMP_vect){
    PORTD &= ~(1 << dig);
    if(++dig > 3) {
        dig = 0;
    }
    set_register_outputs(
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	22 30       	cpi	r18, 0x02	; 2
  ca:	09 f0       	breq	.+2      	; 0xce <__vector_3+0x70>
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	89 2b       	or	r24, r25
/media/michael/HDD/src/avr_nauka/c++/code/spi.c:19
void transfer_byte_to_register(uint8_t data){
    SPDR = data;
    while(!(SPSR & (1 << SPIF)));
}
void set_register_outputs(uint8_t data){
    PORTB &= ~(1 << LATCH);
  d0:	c1 98       	cbi	0x18, 1	; 24
/media/michael/HDD/src/avr_nauka/c++/code/spi.c:20
    PORTB |= (1 << OUTPUT_ENABLE);
  d2:	c2 9a       	sbi	0x18, 2	; 24
/media/michael/HDD/src/avr_nauka/c++/code/spi.c:15
void init_spi(void){
    DDRB |= (1 << MOSI) | (1 << OUTPUT_ENABLE) | (1 << LATCH) | (1 << CLOCK);
    SPCR |= (1 << MSTR) | (1 << SPE) | (1 << DORD) | (1 << SPR1);
}
void transfer_byte_to_register(uint8_t data){
    SPDR = data;
  d4:	8f b9       	out	0x0f, r24	; 15
/media/michael/HDD/src/avr_nauka/c++/code/spi.c:16
    while(!(SPSR & (1 << SPIF)));
  d6:	77 9b       	sbis	0x0e, 7	; 14
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <__vector_3+0x78>
/media/michael/HDD/src/avr_nauka/c++/code/spi.c:22
}
void set_register_outputs(uint8_t data){
    PORTB &= ~(1 << LATCH);
    PORTB |= (1 << OUTPUT_ENABLE);
    transfer_byte_to_register(data);
    PORTB &= ~(1 << OUTPUT_ENABLE);
  da:	c2 98       	cbi	0x18, 2	; 24
/media/michael/HDD/src/avr_nauka/c++/code/spi.c:23
    PORTB |= (1 << LATCH);
  dc:	c1 9a       	sbi	0x18, 1	; 24
/media/michael/HDD/src/avr_nauka/c++/code/main.c:76
        eeprom_read_byte(&LED_DISP_VALS[values[dig]]) | (dig == 2? 0x01 : 0x00)
    );
    PORTD |= (1 << dig);
  de:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <dig>
  e2:	22 b3       	in	r18, 0x12	; 18
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	01 c0       	rjmp	.+2      	; 0xec <__vector_3+0x8e>
  ea:	88 0f       	add	r24, r24
  ec:	3a 95       	dec	r19
  ee:	ea f7       	brpl	.-6      	; 0xea <__vector_3+0x8c>
  f0:	82 2b       	or	r24, r18
  f2:	82 bb       	out	0x12, r24	; 18
/media/michael/HDD/src/avr_nauka/c++/code/main.c:77
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	bf 91       	pop	r27
  fa:	af 91       	pop	r26
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	7f 91       	pop	r23
 102:	6f 91       	pop	r22
 104:	5f 91       	pop	r21
 106:	4f 91       	pop	r20
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_6>:
__vector_6():
/media/michael/HDD/src/avr_nauka/c++/code/main.c:65
    
        cycle = 0;
        while(!cycle);
    }
}
ISR(TIMER1_COMPA_vect){
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
/media/michael/HDD/src/avr_nauka/c++/code/main.c:66
    cycle = 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
/media/michael/HDD/src/avr_nauka/c++/code/main.c:67
}
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <main>:
main():
/media/michael/HDD/src/avr_nauka/c++/code/main.c:23
volatile uint8_t values[4] = { 10, 2, 3, 5 };

int main(void){
    temperature_vars_t temperature_sensor;
    
    DDRD = 0x0F;
 134:	8f e0       	ldi	r24, 0x0F	; 15
 136:	81 bb       	out	0x11, r24	; 17
/media/michael/HDD/src/avr_nauka/c++/code/main.c:24
    PORTD = 0x0F;
 138:	82 bb       	out	0x12, r24	; 18
/media/michael/HDD/src/avr_nauka/c++/code/timers.c:4
#include "timers.h"

void write_to_16bit_timer_OCR(uint16_t OCR){
    OCR1AH = (uint8_t)(((OCR & 0xFF00) >> 8));
 13a:	8e e3       	ldi	r24, 0x3E	; 62
 13c:	8b bd       	out	0x2b, r24	; 43
/media/michael/HDD/src/avr_nauka/c++/code/timers.c:5
    OCR1AL = (uint8_t)((OCR & 0x00FF));
 13e:	8f e7       	ldi	r24, 0x7F	; 127
 140:	8a bd       	out	0x2a, r24	; 42
/media/michael/HDD/src/avr_nauka/c++/code/timers.c:14
        case 1: TCCR1B |= 0x01; break;
    }
}
void set_16bit_timer_mode(uint8_t mode){
    switch(mode){
        case CTC: TCCR1B |= (1 << WGM12); TIMSK |= 0x10; break;
 142:	8e b5       	in	r24, 0x2e	; 46
 144:	88 60       	ori	r24, 0x08	; 8
 146:	8e bd       	out	0x2e, r24	; 46
 148:	89 b7       	in	r24, 0x39	; 57
 14a:	80 61       	ori	r24, 0x10	; 16
 14c:	89 bf       	out	0x39, r24	; 57
/media/michael/HDD/src/avr_nauka/c++/code/timers.c:9
    OCR1AH = (uint8_t)(((OCR & 0xFF00) >> 8));
    OCR1AL = (uint8_t)((OCR & 0x00FF));
}
void set_16bit_timer_prescaler(uint16_t prescaler){
    switch(prescaler){
        case 1: TCCR1B |= 0x01; break;
 14e:	8e b5       	in	r24, 0x2e	; 46
 150:	81 60       	ori	r24, 0x01	; 1
 152:	8e bd       	out	0x2e, r24	; 46
/media/michael/HDD/src/avr_nauka/c++/code/timers.c:25
    set_16bit_timer_mode(mode);
    set_16bit_timer_prescaler(prescaler);
}

void write_to_8bit_timer_OCR(uint8_t OCR){
    OCR2 = OCR;
 154:	8e e4       	ldi	r24, 0x4E	; 78
 156:	83 bd       	out	0x23, r24	; 35
/media/michael/HDD/src/avr_nauka/c++/code/timers.c:32
void set_8bit_timer_prescaler(uint8_t prescaler){
    TCCR2 |= prescaler;
}
void set_8bit_timer_mode(uint8_t mode){
    switch(mode){
        case CTC: TCCR2 |= (1 << WGM21); TIMSK |= 0x80; break;
 158:	85 b5       	in	r24, 0x25	; 37
 15a:	88 60       	ori	r24, 0x08	; 8
 15c:	85 bd       	out	0x25, r24	; 37
 15e:	89 b7       	in	r24, 0x39	; 57
 160:	80 68       	ori	r24, 0x80	; 128
 162:	89 bf       	out	0x39, r24	; 57
/media/michael/HDD/src/avr_nauka/c++/code/timers.c:28

void write_to_8bit_timer_OCR(uint8_t OCR){
    OCR2 = OCR;
}
void set_8bit_timer_prescaler(uint8_t prescaler){
    TCCR2 |= prescaler;
 164:	85 b5       	in	r24, 0x25	; 37
 166:	83 60       	ori	r24, 0x03	; 3
 168:	85 bd       	out	0x25, r24	; 37
/media/michael/HDD/src/avr_nauka/c++/code/spi.c:11
#define CLOCK 5
#define LATCH 1


void init_spi(void){
    DDRB |= (1 << MOSI) | (1 << OUTPUT_ENABLE) | (1 << LATCH) | (1 << CLOCK);
 16a:	87 b3       	in	r24, 0x17	; 23
 16c:	8e 62       	ori	r24, 0x2E	; 46
 16e:	87 bb       	out	0x17, r24	; 23
/media/michael/HDD/src/avr_nauka/c++/code/spi.c:12
    SPCR |= (1 << MSTR) | (1 << SPE) | (1 << DORD) | (1 << SPR1);
 170:	8d b1       	in	r24, 0x0d	; 13
 172:	82 67       	ori	r24, 0x72	; 114
 174:	8d b9       	out	0x0d, r24	; 13
/media/michael/HDD/src/avr_nauka/c++/code/main.c:30
    
    init_temperature_sensor(&temperature_sensor);
    init_16bit_timer(0x01, 0x3E7F, CTC);
    init_8bit_timer(0x03, 0x4E, CTC);
    init_spi();
    sei();
 176:	78 94       	sei
/media/michael/HDD/src/avr_nauka/c++/code/main.c:61
            temperature_sensor.pc = eeprom_read_byte(&temperature_address[temperature_sensor.pc]); 
        }

        if(temperature_sensor.timer) { --temperature_sensor.timer; }
    
        cycle = 0;
 178:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
/media/michael/HDD/src/avr_nauka/c++/code/main.c:62
        while(!cycle);
 17c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 180:	88 23       	and	r24, r24
 182:	e1 f3       	breq	.-8      	; 0x17c <main+0x48>
 184:	f9 cf       	rjmp	.-14     	; 0x178 <main+0x44>

00000186 <eeprom_read_byte>:
 186:	e1 99       	sbic	0x1c, 1	; 28
 188:	fe cf       	rjmp	.-4      	; 0x186 <eeprom_read_byte>
 18a:	9f bb       	out	0x1f, r25	; 31
 18c:	8e bb       	out	0x1e, r24	; 30
 18e:	e0 9a       	sbi	0x1c, 0	; 28
 190:	99 27       	eor	r25, r25
 192:	8d b3       	in	r24, 0x1d	; 29
 194:	08 95       	ret

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
